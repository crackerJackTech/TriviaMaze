1.	Introduction
1.1	Purpose 
<Identify the product whose software requirements are specified in this document, including the revision or release number. Describe the scope of the product that is covered by this SRS, particularly if this SRS describes only part of the system or a single subsystem.>
The entirety of this SRS document illustrates the functional and non-functional requirements for the release 1.0 of the Entertainment Trivia Maze (ETM).

1.2	Document Conventions
<Describe any standards or typographical conventions that were followed when writing this SRS, such as fonts or highlighting that have special significance. For example, state whether priorities for higher-level requirements are assumed to be inherited by detailed requirements, or whether every requirement statement is to have its own priority.>
(ETM) – Entertainment Trivia Maze

1.3	Intended Audience and Reading Suggestions
<Describe the different types of reader that the document is intended for, such as developers, project managers, marketing staff, users, testers, and documentation writers. Describe what the rest of this SRS contains and how it is organized. Suggest a sequence for reading the document, beginning with the overview sections and proceeding through the sections that are most pertinent to each reader type.>
This document is intended for developers, project manager, testers, documentation writers, and users. The remainder of this SRS contains different categories for the what, where, and how, depending on the intention of the reader. 
-Developers may begin reading in 2.3 Operating Environment and 2.4 Operating Environment then proceed to section 3.0 henceforth.
-Project managers may start in section 2.0 Overall Description henceforth.
-Marketing staff may start in section 5.0 Other Non-Functional Requirements henceforth.
-Users may start in section 2.0 Overall Description henceforth.
-Testers may start in section 2.0 Overall Description henceforth.
-Documentation Writers may start in section 2.0 Overall Description then section 5.0 Other Non-Functional Requirements henceforth.

1.4	Project Scope
<Provide a short description of the software being specified and its purpose, including relevant benefits, objectives, and goals. Relate the software to corporate goals or business strategies. If a separate vision and scope document is available, refer to it rather than duplicating its contents here. An SRS that specifies the next release of an evolving product should contain its own scope statement as a subset of the long-term strategic product vision.>
The ETM purpose is engage a user in a maze style game in which to traverse through the maze requires knowledge of Music and Movies pertaining to the present and past. A user will spawn inside of the maze and maneuver up, down, left, or right. 
Each action will encounter a door or wall. If a door is encountered, the door will be either unlocked or locked. The door that is unlocked will move the user to their intended direction, and the door that is locked will ask a question. If the question being asked is incorrect, the door will be locked perpetually.
The questions given by the maze will be in three different forms, multiple choice, true or false, or short answer. The topics of the questions will be of Music and Movies from 1960’s-Present.

<--! May need to add more or less -->

1.5	References
<List any other documents or Web addresses to which this SRS refers. These may include user interface style guides, contracts, standards, system requirements specifications, use case documents, or a vision and scope document. Provide enough information so that the reader could access a copy of each reference, including title, author, version number, date, and source or location.>

2.	Overall Description

2.1	Product Perspective
<Describe the context and origin of the product being specified in this SRS. For example, state whether this product is a follow-on member of a product family, a replacement for certain existing systems, or a new, self-contained product. If the SRS defines a component of a larger system, relate the requirements of the larger system to the functionality of this software and identify interfaces between the two. A simple diagram that shows the major components of the overall system, subsystem interconnections, and external interfaces can be helpful.>
The ETM is a self contained system and product. It does not preceed or suceed any other systems or products. This product was given as an assignment by the curator of the Software Development Principles class at Eastern Washington University, in order to build a foundation for learning in the scope of acceptible software solutions to software problems.

2.2	Product Features
<Summarize the major features the product contains or the significant functions that it performs or lets the user perform. Details will be provided in Section 3, so only a high level summary  is needed here. Organize the functions to make them understandable to any reader of the SRS. A picture of the major groups of related requirements and how they relate, such as a top level data flow diagram or a class diagram, is often effective.>
This product interacts directly with the user in an entertaining fashion. On a basic level, the ETM will have one player, who will start the game and be asked a series of questions in order to ultimately escape a maze. The maze will consist of a series of rooms, each room will have anywhere from 2 to 4 doors depending on the location of the room the player is currently occupying. A door will lead to another room, but to go through a door the player must answer a question related to "Entertainment Trivia". The questions ans answers will be stored in a SQLite database. The Player will have the ability to choose to navigate North, South, East, or West. When they answer that door's trivia question, they will then be able to move onto that new room. If the Player answers inccorectly the door will become locked.

2.3	User Classes and Characteristics
<Identify the various user classes that you anticipate will use this product. User classes may be differentiated based on frequency of use, subset of product functions used, technical expertise, security or privilege levels, educational level, or experience. Describe the pertinent characteristics of each user class. Certain requirements may pertain only to certain user classes. Distinguish the favored user classes from those who are less important to satisfy.>
User Classes can include anyone of any expertise. There will be no admin privileges, or separation in the player base. The only user class is the Player who will have basic privileges, which will be the same as any other Player that participates in the ETM.   

2.4	Operating Environment
<Describe the environment in which the software will operate, including the hardware platform, operating system and versions, and any other software components or applications with which it must peacefully coexist.>
The ETM is designed to operate based on the programming language Java. The Java version that will be used for implementation will be greater than Java 10.0. The Operating Systems that the ETM will be designed to run on include: Windows 7, Windows 10, Apple Mac OS Sierra, Apple Mac OS Mojave, Linux.

2.5	Design and Implementation Constraints
<Describe any items or issues that will limit the options available to the developers. These might include: corporate or regulatory policies; hardware limitations (timing requirements, memory requirements); interfaces to other applications; specific technologies, tools, and databases to be used; parallel operations; language requirements; communications protocols; security considerations; design conventions or programming standards (for example, if the customer’s organization will be responsible for maintaining the delivered software).>
There are no constraints to the developers at this time of development.

2.6	User Documentation
<List the user documentation components (such as user manuals, on-line help, and tutorials) that will be delivered along with the software. Identify any known user documentation delivery formats or standards.>
At this time of development there are no manuals or tutorials for the ETM.

2.7	Assumptions and Dependencies
<List any assumed factors (as opposed to known facts) that could affect the requirements stated in the SRS. These could include third-party or commercial components that you plan to use, issues around the development or operating environment, or constraints. The project could be affected if these assumptions are incorrect, are not shared, or change. Also identify any dependencies the project has on external factors, such as software components that you intend to reuse from another project, unless they are already documented elsewhere (for example, in the vision and scope document or the project plan).>
The ETM does not depend on any outside Products and therefore has no assumptions about other commercial components.

3.	System Features
<This template illustrates organizing the functional requirements for the product by system features, the major services provided by the product. You may prefer to organize this section by use case, mode of operation, user class, object class, functional hierarchy, or combinations of these, whatever makes the most logical sense for your product.>

3.1	System Feature 1
<Don’t really say “System Feature 1.” State the feature name in just a few words.>

3.1.1	Description and Priority
	<Provide a short description of the feature and indicate whether it is of High, Medium, or Low priority. You could also include specific priority component ratings, such as benefit, penalty, cost, and risk (each rated on a relative scale from a low of 1 to a high of 9).>

3.1.2	Stimulus/Response Sequences
	<List the sequences of user actions and system responses that stimulate the behavior defined for this feature. These will correspond to the dialog elements associated with use cases.>

3.1.3	Functional Requirements
	<Itemize the detailed functional requirements associated with this feature. These are the software capabilities that must be present for the user to carry out the services provided by the feature, or to execute the use case. Include how the product should respond to anticipated error conditions or invalid inputs. Requirements should be concise, complete, unambiguous, verifiable, and necessary. Use “TBD” as a placeholder to indicate when necessary information is not yet available.>
	
	<Each requirement should be uniquely identified with a sequence number or a meaningful tag of some kind.>
	REQ-1:	REQ-2:	


3.2	System Feature 2 (and so on)

4.	External Interface Requirements

4.1	User Interfaces
<Describe the logical characteristics of each interface between the software product and the users. This may include sample screen images, any GUI standards or product family style guides that are to be followed, screen layout constraints, standard buttons and functions (e.g., help) that will appear on every screen, keyboard shortcuts, error message display standards, and so on. Define the software components for which a user interface is needed. Details of the user interface design should be documented in a separate user interface specification.>
The interface for the ETM will be based on the command line. Therefore the visuals for the end user will consist of: A welcome message will be displayed firstly to the user, "Welcome to the Entertainment Trivia Maze!" There will be a menu screen displayed that will consist of options: {Start Game, Load Saved Game, Quit}. Available navigation options {North, South, East, West}, the avalable navigation options displayed will vary depending on the users completion of questions. When a navigation option is selected the Question will be displayed along with the multiple choice answers. When a question is answered correctly text "Correct Answer! Moving to next room..." will be displayed. This will repeat until the exit door is found, then the program will display "The exit door has been found! Answer the final question correctly to exit the Maze and win the game!" When the exit door question is answered correctly the game will display "Congratulations, you have beaten the Entertainment Trivia Maze! Play Again?" If a question is answered incorrectly during the game, the message "Sorry, wrong answer. Door locked!" will be displayed.


4.2	Hardware Interfaces
<Describe the logical and physical characteristics of each interface between the software product and the hardware components of the system. This may include the supported device types, the nature of the data and control interactions between the software and the hardware, and communication protocols to be used.>
There are no hardware components of the system in the case of the ETM. The ETM backend Java implementation will communicate logically with a SQLite database in order to retrieve questions and answers to provide the user.

4.3	Software Interfaces
<Describe the connections between this product and other specific software components (name and version), including databases, operating systems, tools, libraries, and integrated commercial components. Identify the data items or messages coming into the system and going out and describe the purpose of each. Describe the services needed and the nature of communications. Refer to documents that describe detailed application programming interface protocols. Identify data that will be shared across software components. If the data sharing mechanism must be implemented in a specific way (for example, use of a global data area in a multitasking operating system), specify this as an implementation constraint.>
The ETM will communicate with a SQLite database in order to retrieve questions and answers stored in the database in order to provide them to the user. At this time in development of the ETM, the ETM does not access or use any outside Java libraries.

4.4	Communications Interfaces
<Describe the requirements associated with any communications functions required by this product, including e-mail, web browser, network server communications protocols, electronic forms, and so on. Define any pertinent message formatting. Identify any communication standards that will be used, such as FTP or HTTP. Specify any communication security or encryption issues, data transfer rates, and synchronization mechanisms.>
The ETM does not have any communication functions and currently does not have a plan to implement this ability.

5.	Other Nonfunctional Requirements

5.1	Performance Requirements
<If there are performance requirements for the product under various circumstances, state them here and explain their rationale, to help the developers understand the intent and make suitable design choices. Specify the timing relationships for real time systems. Make such requirements as specific as possible. You may need to state performance requirements for individual functional requirements or features.>
The ETM will need to be swift and efficient as a piece of entertainment.

5.2	Safety Requirements
<Specify those requirements that are concerned with possible loss, damage, or harm that could result from the use of the product. Define any safeguards or actions that must be taken, as well as actions that must be prevented. Refer to any external policies or regulations that state safety issues that affect the product’s design or use. Define any safety certifications that must be satisfied.>
There are no safety requirments currently in the development of the ETM.

5.3	Security Requirements
<Specify any requirements regarding security or privacy issues surrounding use of the product or protection of the data used or created by the product. Define any user identity authentication requirements. Refer to any external policies or regulations containing security issues that affect the product. Define any security or privacy certifications that must be satisfied.>
The ETM will not require any sensitive material from the user, eliminating any security risk that a piece of software can have. The database will also not contain any sensitive material that would require security protocols.

5.4	Software Quality Attributes
<Specify any additional quality characteristics for the product that will be important to either the customers or the developers. Some to consider are: adaptability, availability, correctness, flexibility, interoperability, maintainability, portability, reliability, reusability, robustness, testability, and usability. Write these to be specific, quantitative, and verifiable when possible. At the least, clarify the relative preferences for various attributes, such as ease of use over ease of learning.>
During the development and continuation of the software lifecycle regarding the ETM, the developers (Devin Kramer, Cameron Sorensen, Samuel Nixon) will remain flexible to the requirements of the end user. If any changes are required, they will be handled in a professional and swift manner. The inital development and release will be as robust and solid as the developers are able to accomplish in their alloted time. 

6.	Other Requirements
<Define any other requirements not covered elsewhere in the SRS. This might include database requirements, internationalization requirements, legal requirements, reuse objectives for the project, and so on. Add any new sections that are pertinent to the project.>

Appendix A: Glossary
<Define all the terms necessary to properly interpret the SRS, including acronyms and abbreviations. You may wish to build a separate glossary that spans multiple projects or the entire organization, and just include terms specific to a single project in each SRS.>
ETM: Entertainment Trivia Maze

Appendix B: Analysis Models
<Optionally, include any pertinent analysis models, such as data flow diagrams, class diagrams, state-transition diagrams, or entity-relationship diagrams.>

Appendix C: Issues List
< This is a dynamic list of the open requirements issues that remain to be resolved, including TBDs, pending decisions, information that is needed, conflicts awaiting resolution, and the like.>


Revision – Samuel Nixon, Devin Kramer 10-30-19
Revision – Devin Kramer 11-3-19
Revision - Samuel Nixon 11-5-19
